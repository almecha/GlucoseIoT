{
  "project": {
    "name": "IoT Platform for Smart Glucose Monitor",
    "version": "v0.2",
    "submissionDate": "2024-06-12",
    "teamMembers": [
      { "name": "Maria Sol Liendo", "studentId": "337960" },
      { "name": "Luka Maksimovic", "studentId": "328868" },
      { "name": "Sebastiano Natali", "studentId": "345699" },
      { "name": "Nurzhan Aitaliyev", "studentId": "333081" }
    ]
  },
  "catalog": {
    "introduction": "The IoT Platform for Smart Glucose Monitor is designed to help Type 1 Diabetes patients by providing real‚Äêtime glucose monitoring and personalized insulin management. This catalog serves as the centralized registry for all devices, services, and actors within the platform.",
    "purpose": "Maintain a comprehensive list of all system components with their communication endpoints and configuration parameters. This supports device/service registration, endpoint discovery via REST and MQTT interfaces, and centralized configuration management.",
    "structure": {
      "sections": [
        "Actor Identification and Registration",
        "Endpoints and Communication Interfaces",
        "Configuration Settings and Thresholds",
        "Integration and Update Procedures"
      ]
    },
    "actors": {
      "MessageBroker": {
        "description": "Provides asynchronous communication using the MQTT protocol.",
        "protocol": "MQTT",
        "endpoints": {
          "topics": "Defined topics for glucose measurements, alerts, and command messages."
        },
        "configuration": {
          "host": "mqtt.example.com",
          "port": 1883,
          "authentication": "credentials if required"
        }
      },
      "CatalogService": {
        "description": "Acts as the central registry for all devices and services by providing endpoint information and configuration settings.",
        "protocol": "REST Web Services",
        "endpoints": {
          "GET /devices": "Retrieve the full list of registered devices and services.",
          "GET /devices/{id}": "Retrieve detailed information for a specific device/service.",
          "POST /devices": "Register a new device or service.",
          "PUT /devices/{id}": "Update configuration settings."
        },
        "configuration": "Maintains sensor lists, threshold values, and control strategies."
      },
      "RaspberryPiConnector": {
        "description": "Integrates Raspberry Pi boards with blood glucose sensors.",
        "protocol": "REST (data retrieval) and MQTT (data publishing)",
        "endpoints": {
          "REST": "GET /sensor-data provides real-time glucose measurements.",
          "MQTT": "Publishes sensor data on a predefined topic (e.g., /sensors/glucose)."
        },
        "configuration": "Sensor calibration and data transmission intervals."
      },
      "ThresholdAnalyzer": {
        "description": "Monitors glucose levels and triggers alerts when pre-meal and post-meal thresholds are crossed.",
        "protocol": "MQTT (Subscriber/Publisher) and REST (for configuration retrieval)",
        "endpoints": {
          "MQTT": "Subscribes to glucose measurement topics and publishes alerts (e.g., /alerts/threshold).",
          "REST": "GET /threshold-settings retrieves threshold configurations from the Catalog Service."
        },
        "configuration": "Pre-meal and post-meal threshold values and algorithm parameters."
      },
      "ReportsGenerator": {
        "description": "Generates historical reports on glucose trends and insulin usage for patient monitoring and clinical review.",
        "protocol": "REST Web Services (both provider and consumer)",
        "endpoints": {
          "GET /reports": "Retrieve available reports.",
          "POST /reports": "Request generation of a new report."
        },
        "configuration": "Report generation parameters and selectable time frames."
      },
      "ThingspeakAdaptor": {
        "description": "Bridges data between the internal system and the third-party Thingspeak platform.",
        "protocol": "MQTT (Subscriber) and REST (Uploader)",
        "endpoints": {
          "MQTT": "Subscribes to topics for glucose and meal notifications.",
          "REST": "POST /thingspeak uploads data to the Thingspeak service."
        },
        "configuration": "API key, channel ID, and update frequency settings."
      },
      "Thingspeak": {
        "description": "Third-party service for time-series storage and retrieval of sensor data.",
        "protocol": "REST Web Services",
        "endpoints": {
          "GET /channels": "Retrieve channel data.",
          "POST /channels/update": "Update channel with new sensor data."
        },
        "configuration": "Channel settings and authentication parameters."
      },
      "Dashboard": {
        "description": "Provides a user interface for real-time monitoring and visualization of glucose levels, insulin delivery, and historical trends.",
        "protocol": "REST Web Services consumption",
        "endpoints": {
          "GET /dashboard/data": "Fetch current data for visualization.",
          "GET /dashboard/reports": "Retrieve generated reports."
        },
        "configuration": "UI refresh rates and visualization parameters."
      },
      "PatientsTelegramBot": {
        "description": "Interactive interface for patients to receive alerts, input meal details, and get insulin dosage recommendations.",
        "protocol": "MQTT (Publisher/Subscriber)",
        "endpoints": {
          "MQTT": "Publishes meal notifications and subscribes to alert topics."
        },
        "configuration": "Chat commands, response protocols, and alert thresholds."
      },
      "DoctorsTelegramBot": {
        "description": "Interface for healthcare professionals to manage patient parameters and request reports.",
        "protocol": "REST Web Services",
        "endpoints": {
          "GET /doctor/patient-parameters": "Fetch patient configuration data.",
          "PUT /doctor/patient-parameters": "Update patient settings.",
          "GET /doctor/reports": "Retrieve patient reports."
        },
        "configuration": "Access controls, authentication tokens, and command mappings."
      }
    },
    "configurationSettings": {
      "MQTTBrokerSettings": {
        "host": "mqtt.example.com",
        "port": 1883,
        "topics": "Defined topics for sensor data, alerts, and commands.",
        "authentication": "Required credentials"
      },
      "RESTAPI": {
        "baseURL": "http://api.example.com",
        "endpoints": [
          "/devices",
          "/sensor-data",
          "/threshold-settings",
          "/reports",
          "/thingspeak",
          "/dashboard/data",
          "/doctor/patient-parameters"
        ]
      },
      "ThresholdAnalyzerParameters": {
        "preMealThreshold": "Defined value",
        "postMealThreshold": "Defined value"
      },
      "SensorCalibration": {
        "parameters": "Calibration settings for the Raspberry Pi sensors"
      },
      "ThingspeakAdaptorSettings": {
        "apiKey": "your_api_key_here",
        "channelId": "your_channel_id_here",
        "updateInterval": "in seconds"
      },
      "DashboardSettings": {
        "refreshRate": "in seconds",
        "visualization": "parameters for chart rendering"
      }
    },
    "integrationProcedures": {
      "deviceRegistration": "Register new devices using the POST /devices endpoint in the Catalog Service.",
      "endpointDiscovery": "All actors retrieve the latest endpoint information via GET /devices at startup.",
      "configurationUpdates": "Update settings via PUT /devices/{id} to ensure all actors operate with the most current parameters.",
      "serviceInteroperability": "Leverage MQTT and REST communication protocols for robust data exchange and timely notifications."
    },
    "conclusion": "This catalog serves as an essential reference for managing and integrating all components of the IoT Platform for Smart Glucose Monitor, ensuring seamless interoperability and streamlined management across the platform."
  }
}
